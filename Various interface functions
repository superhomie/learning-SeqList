#include<stdio.h>
#include<stdlib.h>

#define N 100

typedef int SLDataType;
typedef struct SeqList {
	SLDataType* a;
	int size;
	int capacity;
} SL;

void SeqListprintf(SL* ps) ;
void SeqListInit(SL* ps) ;
void SeqLisCheckCapacity(SL* ps) ;
void SeqListPushBack(SL* ps,SLDataType x) ;
void SeqListPushFront(SL* ps,SLDataType x) ;
void SeqListPopBack(SL*s);
void SeqListPopFront(SL* ps) ;
void SeqListDestory(SL* ps) ;


//chushihua
void SeqListInit(SL* ps) {
	ps->a=NULL;
	ps->size=ps->capacity=0;
}

void SeqListprintf(SL* ps) {
	for(int i=0; i<ps->size; i++) {
		printf("%d ",ps->a[i]);
	}
	printf("\n");
}


void SeqListDestory(SL* ps) {
	free(ps->a);
	ps->a=NULL;
	ps->capacity=ps->size=0;

}
//kuorong
void SeqLisCheckCapacity(SL* ps) {
	if(ps->size==ps->capacity) {
		int newcapacity=ps->capacity==0? 4:ps->capacity*2;
		SLDataType* tmp=(SLDataType*)realloc(ps->a,newcapacity*sizeof(SLDataType));
		/* 	if(tmp==NULL) {
				printf("realloc fail\n");
				exit(-1);}    */
		ps->a=tmp;
		ps->capacity=newcapacity;
	}
}
//weicha
void SeqListPushBack(SL* ps,SLDataType x) {
	SeqLisCheckCapacity(ps);
	ps->a[ps->size]=x;
	ps->size++;
}
//toucha
void SeqListPushFront(SL* ps,SLDataType x) {
	SeqLisCheckCapacity(ps);
	int end=ps->size-1;
	while(end>=0) {
		ps->a[end+1]=ps->a[end];
		end--;
	}
	ps->a[0]=x;
	ps->size++;

}
//weishan
void SeqListPopBack(SL*ps) {
	if(ps->size>0)
		//	ps->a[ps->size-1]=0;
		ps->size--;

}

//toushan
void SeqListPopFront(SL* ps) {
	int begin=0;
	while(begin<ps->size-1) {
		ps->a[begin]=ps->a[begin+1];
		begin++	;
	}
	ps->size--;
}
//delete a   number
void SeqListPop1(SL* ps,SLDataType x) {
	int j=0,i=0,n=0;
	while(i<ps->size) {
		if(x==ps->a[i]) {

			if(i=ps->size-1-n)
				ps->size--;
			else for(j=i+1; j<=ps->size-n; j++) {
					ps->a[j-1]=ps->a[j]	;
					ps->size--;
				}
			n++;
		}
		i++;
	}
}
//Only the first position can be reported.
int SeqListFind(SL* ps,SLDataType x) {
	int i=0;
	int count=0;
	for(; i<ps->size; i++)
		if(x==ps->a[i])
		return i+1;
			   return -1;
}
//notcie the insert position,before or after;
void SeqListInsert(SL* ps,int pos,int x) {
	SeqLisCheckCapacity(ps); 
	int end=ps->size-1;
	while(end>=pos-1) {
		ps->a[end+1]=ps->a[end];
		end--;
	}
	ps->a[pos-1]=x;
	ps->size++;
}

void test1() {
	SL sl;
	SeqListInit(&sl);
	SeqListPushBack(&sl,1);
	SeqListPushBack(&sl,2);
	SeqListPushBack(&sl,3);
	SeqListPushBack(&sl,4);
	SeqListPushBack(&sl,5);

	SeqListprintf(&sl);

	SeqListPopBack(&sl);
	SeqListPopBack(&sl);

	SeqListprintf(&sl);





}
void test2() {
	SL sl;
	SeqListInit(&sl);
	SeqListPushBack(&sl,1);
	SeqListPushBack(&sl,2);
	SeqListPushBack(&sl,3);
	SeqListPushBack(&sl,4);
	SeqListPushBack(&sl,5);
	SeqListPushBack(&sl,5);
	SeqListprintf(&sl);

	SeqListPushFront(&sl,9);
	SeqListprintf(&sl);

	SeqListPopFront(&sl);
	SeqListPopFront(&sl);
	SeqListprintf(&sl);

	printf("%d",SeqListFind(&sl,5));

}


void test3() {
	SL sl;
	SeqListInit(&sl);

	SeqListPushBack(&sl,1);
	SeqListPushBack(&sl,2);
	SeqListPushBack(&sl,3);
	SeqListPushBack(&sl,4);
	SeqListPushBack(&sl,5);
	SeqListprintf(&sl);


	SeqListInsert(&sl,3,6);
	SeqListprintf(&sl);
	int pos=SeqListFind(&sl,3);
	if(pos!=-1)
	{
	SeqListInsert(&sl,pos,10);
	SeqListprintf(&sl);}
}


int main() {

	//test1();
	//test2();
	//test3();

	return 0;
}
